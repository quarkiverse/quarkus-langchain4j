# MCP server
quarkus.mcp.server.server-info.name=Service Account Name Provider
quarkus.mcp.server.traffic-logging.enabled=true
quarkus.mcp.server.traffic-logging.text-limit=1000

# Require an authenticated access to MCP server
quarkus.http.auth.permission.authenticated.paths=/mcp/*
quarkus.http.auth.permission.authenticated.policy=authenticated

# Default Quarkus OIDC tenant verifies access tokens which reach the MCP server.
# Default OIDC tenant properties such as the Keycloak address are set in devmode by the Keycloak Dev Service. 
quarkus.oidc.client-id=quarkus-mcp-server
# All tokens verified by this default OIDC tenant must target only this MCP server,
# with the token audience (`aud`) claim containing `quarkus-mcp-server`
quarkus.oidc.token.audience=quarkus-mcp-server

# Keycloak devservice that enables a default OIDC tenant that secures MCP server 
# Keycloak may require more memory on some systems
quarkus.keycloak.devservices.container-memory-limit=1250M
quarkus.keycloak.devservices.image-name=quay.io/keycloak/keycloak:26.3.1
quarkus.keycloak.devservices.port=8081

# MCP server tool uses REST Client to access a protected REST server to complete a service account name request.
# REST server expects tokens that contain a `quarkus-mcp-service` audience to prove they are intended for the REST server only.
# Therefore, instead of propagating the token whose audience is this MCP `quarkus-mcp-server` server,
# the token is exchanged to create a new token with the correct target audience set to `quarkus-mcp-service`.

# Request a token exchange before the token propagation
quarkus.rest-client-oidc-token-propagation.exchange-token=true

# OIDC client that performs the current token exchange
quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url}
quarkus.oidc-client.client-id=${quarkus.oidc.client-id}
quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}
quarkus.oidc-client.scopes=quarkus-mcp-service-scope
quarkus.oidc-client.grant.type=exchange
quarkus.oidc-client.grant-options.exchange.subject_token_type=urn:ietf:params:oauth:token-type:access_token

# REST client which accesses a protected REST server, by propagating the exchanged token 
io.quarkiverse.langchain4j.sample.ServiceAccountNameRestClient/mp-rest/url=http://localhost:8080/service-account-name

# OIDC `service-account-name-rest-server` tenant that secures a protected REST server.
# It enforces that all tokens that reach it have a `quarkus-mcp-service` audience.
quarkus.oidc.service-account-name-rest-server.auth-server-url=${quarkus.oidc.auth-server-url}
quarkus.oidc.service-account-name-rest-server.token.audience=quarkus-mcp-service
quarkus.oidc.service-account-name-rest-server.tenant-paths=/service-account-name
