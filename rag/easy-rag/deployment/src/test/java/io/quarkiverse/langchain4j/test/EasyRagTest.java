package io.quarkiverse.langchain4j.test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;
import java.util.logging.LogRecord;

import jakarta.enterprise.inject.spi.CDI;

import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.StringAsset;
import org.jboss.shrinkwrap.api.spec.JavaArchive;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.RegisterExtension;

import dev.langchain4j.data.embedding.Embedding;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.rag.RetrievalAugmentor;
import dev.langchain4j.store.embedding.EmbeddingMatch;
import dev.langchain4j.store.embedding.EmbeddingSearchRequest;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.inmemory.InMemoryEmbeddingStore;
import io.quarkiverse.langchain4j.easyrag.runtime.EasyRetrievalAugmentor;
import io.quarkus.test.QuarkusUnitTest;

public class EasyRagTest {

    @RegisterExtension
    static final QuarkusUnitTest unitTest = new QuarkusUnitTest()
            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)
                    .addAsResource(new StringAsset("quarkus.langchain4j.easy-rag.path=src/test/resources/ragdocuments"),
                            "application.properties"))
            .setLogRecordPredicate(record -> true)
            .assertLogRecords(EasyRagTest::verifyLogRecords);

    private static void verifyLogRecords(List<LogRecord> logRecords) {
        assertThat(logRecords.stream().map(LogRecord::getMessage))
                .contains(
                        "Ingesting documents from path: src/test/resources/ragdocuments, path matcher = glob:**, recursive = true")
                .contains("Ingested 2 files as 2 documents")
                .doesNotContain("Writing embeddings to %s")
                .doesNotContain("Reading embeddings from %s");
    }

    // The following three tests verify that when using Easy RAG,
    // EmbeddingModel, an EmbeddingStore, and an EasyRetrievalAugmentor are always present even when the application
    // doesn't have any explicit injection points for them.

    @Test
    public void verifyThatEmbeddingModelIsPresent() {
        EmbeddingModel embeddingModel = CDI.current().select(EmbeddingModel.class).get();
        assertNotNull(embeddingModel);
    }

    @Test
    public void verifyThatRetrievalAugmentorIsAutogenerated() {
        RetrievalAugmentor retrievalAugmentor = CDI.current().select(RetrievalAugmentor.class).get();
        assertNotNull(retrievalAugmentor);
        assertInstanceOf(EasyRetrievalAugmentor.class, retrievalAugmentor);
    }

    @Test
    public void verifyThatEmbeddingStoreIsAutogenerated() {
        EmbeddingStore embeddingStore = CDI.current().select(EmbeddingStore.class).get();
        assertNotNull(embeddingStore);
        assertInstanceOf(InMemoryEmbeddingStore.class, embeddingStore);
    }

    @Test
    public void verifyThatDocumentsAreIngested() {
        EmbeddingModel embeddingModel = CDI.current().select(EmbeddingModel.class).get();
        EmbeddingStore embeddingStore = CDI.current().select(EmbeddingStore.class).get();
        Embedding question = embeddingModel.embed("When was Charlie born?").content();
        List<EmbeddingMatch<TextSegment>> matches = embeddingStore
                .search(EmbeddingSearchRequest.builder().queryEmbedding(question).maxResults(1).build()).matches();
        assertTrue(matches.get(0).embedded().text().contains("2005"));

        question = embeddingModel.embed("When was David born?").content();
        matches = embeddingStore.search(EmbeddingSearchRequest.builder().queryEmbedding(question).maxResults(1).build())
                .matches();
        assertTrue(matches.get(0).embedded().text().contains("2003"));
    }

}
